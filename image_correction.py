# -*- coding: utf-8 -*-
"""Image Correction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlOHW7KbnYTvm01DSRdR3CTQm-HpYfpu
"""

import os
import shutil
import cv2
import numpy as np
from PIL import Image, ImageEnhance

from google.colab import drive
drive.mount('/content/drive')

input_root_dir  = "/content/drive/MyDrive/Colab Notebooks/Style transfer/New images results"
output_root_dir  = "/content/drive/MyDrive/Colab Notebooks/Style transfer/New images results post-processed"

def post_process_image(input_image_path, output_image_path):
    # Load the image
    image = cv2.imread(input_image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Apply Bilateral Filter
    image = cv2.bilateralFilter(image, d=9, sigmaColor=75, sigmaSpace=75)

    # Convert to PIL for further processing
    image = Image.fromarray(image)

    # Enhance Contrast
    enhancer = ImageEnhance.Contrast(image)
    processed_image = enhancer.enhance(1.2)  # You can adjust the factor as needed

    # # Convert back to OpenCV
    # image = np.array(image)

    # # Apply Gaussian Blur
    # image = cv2.GaussianBlur(image, (5, 5), 0)

    # # Save the processed image
    # processed_image = Image.fromarray(image)
    processed_image.save(output_image_path)

# Create the output directory if it doesn't exist
if not os.path.exists(output_root_dir):
    os.makedirs(output_root_dir)

# Walk through the folder structure of "Results"
for root, dirs, files in os.walk(input_root_dir):
    # Get the relative path to replicate the structure
    rel_path = os.path.relpath(root, input_root_dir)

    # Create corresponding directory in "Post processed"
    output_dir = os.path.join(output_root_dir, rel_path)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Process each image in the current directory
    for file in files:
        if file.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):  # You can add more image file extensions if needed
            input_image_path = os.path.join(root, file)
            output_image_path = os.path.join(output_dir, file)

            # Post-process and save the image
            post_process_image(input_image_path, output_image_path)

print("Processing complete.")